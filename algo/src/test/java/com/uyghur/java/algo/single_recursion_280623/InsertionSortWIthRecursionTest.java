package com.uyghur.java.algo.single_recursion_280623;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.util.StopWatch;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

@ExtendWith(MockitoExtension.class)
class InsertionSortWIthRecursionTest {
    @InjectMocks
    private InsertionSortWIthRecursion insertionSortWithRecursion;

    @Test
    void sort() {
        int[] arr = {9, 13, 71, 76, 8, 21, 5, 11};

        insertionSortWithRecursion.sort(arr);

        assertThat(arr).isEqualTo(new int[]{5, 8, 9, 11, 13, 21, 71, 76});
    }

    @Test
    void sortInsertionWhenOneElement() {
        int[] arr = {5, 8, 9, 11, 13, 21, 71, 76, 2};

        insertionSortWithRecursion.sort(arr);

        assertThat(arr).isEqualTo(new int[]{2, 5, 8, 9, 11, 13, 21, 71, 76});
    }

    @Test
    void sortInsertionWhenFirstElement() {
        int[] arr = {89, 2, 5, 8, 9, 11, 13, 21, 71, 76};

        insertionSortWithRecursion.sort(arr);

        assertThat(arr).isEqualTo(new int[]{2, 5, 8, 9, 11, 13, 21, 71, 76, 89});
    }

    @Test
    void sortInsertionWithEmptyArray() {
        int[] arr = new int[0];

        assertThatThrownBy(() -> insertionSortWithRecursion.sort(arr))
                .isInstanceOf(RuntimeException.class)
                .hasMessageContaining("Array should not be empty");


    }

    @Test
    void sortUpdatedTest() {
        int[] arr = {9, 13, 71, 76, 8, 21, 5, 11};

        insertionSortWithRecursion.sortUpdated(arr);

        assertThat(arr).isEqualTo(new int[]{5, 8, 9, 11, 13, 21, 71, 76});
    }

    @Test
    void sortBadPracticeTest() {
        int[] arr = {9, 13, 71, 76, 8, 21, 5, 11};

        insertionSortWithRecursion.sortBadPractice(arr);

        assertThat(arr).isEqualTo(new int[]{5, 8, 9, 11, 13, 21, 71, 76});
    }
/*
        StopWatch stopWatch = new StopWatch();
        stopWatch.start("ij starts.....");
        ij(arr, rows, columns);
        stopWatch.stop();

        stopWatch.start("ji starts....");
        ji(arr, rows, columns);
        stopWatch.stop();

        System.out.println(stopWatch.prettyPrint());
 */

    @Test
    void compareSortUpdatedMethodAndSortBadPractice() {
        int[] arr1 = {9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11};
        int[] arr2 = {9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11, 9, 13, 71, 76, 8, 21, 5, 11};

        StopWatch start = new StopWatch();

        start.start("sortUpdated starts..");
        insertionSortWithRecursion.sortUpdated(arr1);
        start.stop();

        start.start("sortBadPractice starts..");
        insertionSortWithRecursion.sortBadPractice(arr2);
        start.stop();

        System.out.println(start.prettyPrint());
        assertThat(arr1).isEqualTo(new int[]{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76});
        assertThat(arr2).isEqualTo(new int[]{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76});
    }

    /*
    StopWatch '': running time = 1427200 ns
    ---------------------------------------------
    ns         %     Task name
    ---------------------------------------------
    000659300  046%  sortUpdated starts..
    000767900  054%  sortBadPractice starts..
     */

}